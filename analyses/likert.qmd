# Échelles de Likert {#sec-likert}

Les échelles de Likert tirent leur nom du psychologue américain Rensis Likert qui les a développées. Elles sont le plus souvent utilisées pour des variables d'opinion. Elles sont codées sous forme de variable catégorielle et chaque item est codé selon une graduation comprenant en général cinq ou sept choix de réponse, par exemple : Tout à fait d'accord, D'accord, Ni en désaccord ni d'accord, Pas d'accord, Pas du tout d'accord.

Pour les échelles à nombre impair de choix, le niveau central permet d'exprimer une absence d'avis, ce qui rend inutile une modalité « Ne sait pas ». Les échelles à nombre pair de modalités voient l'omission de la modalité neutre et sont dites « à choix forcé ».

## Exemple de données

Générons un jeu de données qui nous servira pour les différents exemples.

```{r}
library(tidyverse)
library(labelled)
niveaux <- c(
  "Pas du tout d'accord",
  "Plutôt pas d'accord",
  "Ni d'accord, ni pas d'accord",
  "Plutôt d'accord",
  "Tout à fait d'accord"
)
set.seed(42)
df <-
  tibble(
    groupe = sample(c("A", "B"), 150, replace = TRUE),
    q1 = sample(niveaux, 150, replace = TRUE),
    q2 = sample(niveaux, 150, replace = TRUE, prob = 5:1),
    q3 = sample(niveaux, 150, replace = TRUE, prob = 1:5),
    q4 = sample(niveaux, 150, replace = TRUE, prob = 1:5),
    q5 = sample(c(niveaux, NA), 150, replace = TRUE),
    q6 = sample(niveaux, 150, replace = TRUE, prob = c(1, 0, 1, 1, 0))
  ) |> 
  mutate(across(q1:q6, ~ factor(.x, levels = niveaux))) |> 
  set_variable_labels(
    q1 = "Première question",
    q2 = "Seconde question",
    q3 = "Troisième question",
    q4 = "Quatrième question",
    q5 = "Cinquième question",
    q6 = "Sixième question"
  )
```

## Tableau de fréquence

On peut tout à fait réaliser un tableau de fréquence classique avec `gtsummary::tbl_summary()`.

```{r}
library(gtsummary)
df |> 
  tbl_summary(include = q1:q6)
```

Cependant, cela produit un tableau inutilement long, d'autant plus que les variables *q1* à *q6* ont les mêmes modalités de réponse. La fonction `gtsummary::tbl_likert()` offre un affichage plus compact.

```{r}
df |> 
  tbl_likert(
    include = q1:q6
  )
```

On peut utiliser `add_n()` pour ajouter les effectifs totaux.

```{r}
df |> 
  tbl_likert(
    include = q1:q6,
    statistic = ~ "{p}%"
  ) |> 
  add_n()
```

::: callout-tip
Dans certains contextes, il est envisageable de traiter notre variable ordinale comme un score numérique. Ici, nous allons attribuer les valeurs -2, -1, 0, +1 et +2 à nos 5 modalités. Dès lors, nous pourrions être intéressé de rajouter à notre tableau le score moyen. Cela est possible en quelques étapes :

1.  transformer nos facteurs en scores : les fonctions `as.integer()` ou `unclass()` permettent de transformer un facteur en valeurs numériques (1 pour la première modalité, 2 pour la seconde, etc.). Dans le cas présent, il est préférable d'utiliser `unclass()` qui préserve les étiquettes de variables ce qui n'est pas le cas de `as.integer()`. Il ne faut pas oublier de retirer 3 pour obtenir des scores allant de -2 à +2. La fonction `dplyr::across()` permet d'effectuer l'opération sur plusieurs variables en même temps.

2.  calculer / générer un tableau statistique avec une colonne par statistique, ce qui se fait avec `gtsummary::tbl_wide_summary()` qui est très similaire à `gtsummary::tbl_summary()`.

3.  mettre les deux tableaux dans une liste et les fusionner avec `gtsummary::tbl_merge()`.

```{r}
list(
  df |> tbl_likert(include = q1:q6),
  tbl_wide_summary(
    df|> mutate(across(q1:q6, \(x) unclass(x) - 3)),
    statistic = c("{mean}", "{sd}"),
    type = ~ "continuous",
    include = q1:q6,
    digits = ~ 1
  )
) |>
  tbl_merge(tab_spanner = FALSE)
```
:::

## Représentations graphiques

Le package `{ggstats}` propose une fonction `ggstats::gglikert()` pour représenter des données de Likert sous la forme d'un diagramme en barres centré sur la modalité centrale.

```{r}
library(ggstats)
gglikert(df, include = q1:q6)
```

Par défaut, les pourcentages totaux ne prennent pas en compte la modalité centrale (lorsque le nombre de modalité est impair). On peut inclure la modalité centrale avec `totals_include_center = TRUE`, auquel cas la modalité centrale seront comptabilisée pour moitié de chaque côté. Le paramètre `sort` permet de trier les modalités (voir l'aide de `ggstats::gglikert()` pour plus de détails sur les différentes méthodes de tri).

```{r}
df |> 
  gglikert(
    include = q1:q6,
    totals_include_center = TRUE,
    sort = "ascending"
  ) +
  guides(
    fill = guide_legend(nrow = 2)
  )
```

Il est possible de séparer les résultats par sous-groupe avec des facettes.

```{r}
df |> 
  gglikert(
    include = q1:q6,
    facet_cols = vars(groupe)
  )
df |> 
  gglikert(
    include = q1:q6,
    y = "groupe",
    facet_rows = vars(.question),
    facet_label_wrap = 15
  )
```

Une représentation alternative consiste à réaliser un graphique en barres classiques, ce que l'on peut aisément obtenir avec `ggstats::gglikert_stacked()`.

```{r}
df |>
  gglikert_stacked(
    include = q1:q6,
    sort = "ascending",
    add_median_line = TRUE
  )
```

Il est à noter que les graphiques en barres divergentes ne font pas consensus. Voir par exemple [*The case against diverging stacked bars*](https://blog.datawrapper.de/divergingbars/) de Lisa Charlotte Muth et Gregor Aisch. À l'inverse, Naomi Robbins et Richard Heiberger recommandent plutôt ce type de représentation dans leur article [*Plotting Likert and Other Rating Scales*](http://www.asasrms.org/Proceedings/y2011/Files/300784_64164.pdf) dans JSM en 2011. On pourra également se référer à ces billets du site Data Revelations : [*How to visualize Likert scale data in Tableau*](https://www.datarevelations.com/howto-likert/), [*Got Likert data? Put the Neutrals off to one side*](https://www.datarevelations.com/got-likert-data-neutrals/) ou encore [*Rethinking the divergent stacked bar chart — placing the stronger views in the center*](https://www.datarevelations.com/rethinkingdivergent/).
