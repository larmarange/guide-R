# Régression logistique multinomiale {#sec-regression-logistique-multinomiale}

La régression logistique multinomiale est une extension de la régression logistique binaire (cf. @sec-regression-logistique-binaire) aux variables qualitatives à trois modalités ou plus. Dans ce cas de figure, chaque modalité de la variable d'intérêt sera comparée à une modalité de référence. Les *odds ratio* seront donc exprimés par rapport à cette dernière.

## Données d'illustration

Pour illustrer la régression logistique multinomiale, nous allons reprendre le jeu de données `hdv2003` du package `{questionr}` et portant sur l'enquête *histoires de vie 2003* de l'Insee.

```{r}
#| message: false
library(tidyverse)
library(labelled)
data("hdv2003", package = "questionr")
d <- hdv2003
```

Nous allons considérer comme variable d'intérêt la variable *trav.satisf*, à savoir la satisfaction ou l'insatisfaction au travail.

```{r}
d |> guideR::proportion(trav.satisf)
```

Nous allons choisir comme modalité de référence la position intermédiaire, à savoir l'« équilibre », que nous allons donc définir comme la première modalité du facteur.

```{r}
d$trav.satisf <- d$trav.satisf |> fct_relevel("Equilibre")
```

Nous allons aussi en profiter pour raccourcir les étiquettes de la variable *trav.imp* :

```{r}
levels(d$trav.imp) <- c("Le plus", "Aussi", "Moins", "Peu")
```

Enfin, procédons à quelques recodages additionnels :

```{r}
d <- d |> 
  mutate(
    sexe = sexe |> fct_relevel("Femme"),
    groupe_ages = age |>
      cut(
        c(18, 25, 45, 99),
        right = FALSE,
        include.lowest = TRUE,
        labels = c("18-24 ans", "25-44 ans",
                   "45 et plus")
      ),
    etudes = nivetud |> 
      fct_recode(
        "Primaire" = "N'a jamais fait d'etudes",
        "Primaire" = "A arrete ses etudes, avant la derniere annee d'etudes primaires",
        "Primaire" = "Derniere annee d'etudes primaires",
        "Secondaire" = "1er cycle",
        "Secondaire" = "2eme cycle",
        "Technique / Professionnel" = "Enseignement technique ou professionnel court",
        "Technique / Professionnel" = "Enseignement technique ou professionnel long",
        "Supérieur" = "Enseignement superieur y compris technique superieur"
    ) |> 
    fct_na_value_to_level("Non documenté")  
  ) |> 
  set_variable_labels(
    trav.satisf = "Satisfaction dans le travail",
    sexe = "Sexe",
    groupe_ages = "Groupe d'âges",
    etudes = "Niveau d'études",
    trav.imp = "Importance accordée au travail"
  )
```

## Calcul du modèle multinomial

Pour calculer un modèle logistique multinomial, nous allons utiliser la fonction `nnet::multinom()` de l'extension `{nnet}`[^regression-logistique-multinomiale-1]. La syntaxe de `nnet::multinom()` est similaire à celle de `glm()`, le paramètre `family` en moins.

[^regression-logistique-multinomiale-1]: Il existe plusieurs alternatives possibles : la fonction `VGAM::vglm()` avec `family = VGAM::multinomial` ou encore `mlogit::mlogit()`. Ces deux fonctions sont un peu plus complexes à mettre en œuvre. On se référera à la documentation de chaque package. Le support des modèles `mlogit()` et `vglm()` est aussi plus limité dans d'autres packages tels que `{broom.helpers}`, `{gtsummary}`, `{ggstats}` ou encore `{marginaleffects}`.

```{r}
reg <- nnet::multinom(
  trav.satisf ~ sexe + etudes + groupe_ages + trav.imp,
  data = d
)
```

```{r}
#| echo: false
reg <- nnet::multinom(
  trav.satisf ~ sexe + etudes + groupe_ages + trav.imp,
  data = d,
  trace = FALSE
)
```

Comme pour la régression logistique binaire, il est possible de réaliser une sélection pas à pas descendante (cf. @sec-selection-modele-pas-a-pas) :

```{r}
#| eval: false
reg2 <- reg |> step()
```

```{r}
#| echo: false
reg2 <- reg |> step(trace = 0)
```

## Affichage des résultats du modèle

Une des particularités de la régression logistique multinomiale est qu'elle produit une série de coefficients pour chaque modalité de la variable d'intérêt (sauf la modalité de référence). Ici, nous aurons donc une série de coefficients pour celles et ceux qui sont satisfaits au travail (comparés à la modalité <q>Équilibre</q>) et une série de coefficients pour celles et ceux qui sont insatisfaits (comparés aux aussi à la modalité <q>Équilibre</q>).

La fonction `gtsummary::tbl_regression()` peut gérer ce type de modèles, et va afficher les deux séries de coefficients l'une au-dessus de l'autre. Nous allons indiquer `exponentiate = TRUE` car, comme pour la régression logistique binaire, l'exponentielle des coefficients peut s'interpréter comme des *odds ratios*.

```{r}
#| message: false
library(gtsummary)
theme_gtsummary_language("fr", decimal.mark = ",")
```

```{r}
#| label: tbl-tbl_regression-multinom
#| tbl-cap: Tableau des odds ratio de la régression logistique multinomiale
tbl <- reg2 |> 
  tbl_regression(exponentiate = TRUE)
tbl
```

L'*odds ratio* du niveau d'étude supérieur pour la modalité *satisfaction* est de 2,01, indiquant que les personnes ayant un niveau d'étude supérieur ont plus de chances d'être satisfait au travail que d'être à l'équilibre que les personnes de niveau primaire. Par contre, l'OR est de seulement 1,08 (et non significatif) pour la modalité *Insatisfait* indiquant que ces personnes n'ont ni plus ni moins de chance d'être insatisfaite que d'être à l'équilibre.

On notera au passage un message d'avertissement de `{gtsummary}` sur le fait que les modèles multinomiaux n'ont pas la même structure que d'autres modèles.

::: callout-tip
La fonction `gtsummary::tbl_regression()` affiche le tableau des coefficients dans un format long. Or, il est souvent plus lisible de présenter les coefficients dans un format large, avec les coefficients pour chaque modalité côte à côte.

Cela n'est pas possible nativement avec `{gtsummary}` mais on pourra éventuellement utiliser la fonction `multinom_pivot_wider()` proposée sur [GitHub Gist](https://gist.github.com/ddsjoberg/a55afa74ac58e1f895862fcabab62406). Voici son code à recopier dans son script.

```{r}
multinom_pivot_wider <- function(x) {
  # check inputs match expectatations
  if (!inherits(x, "tbl_regression") || !inherits(x$inputs$x, "multinom")) {
    stop("`x=` must be class 'tbl_regression' summary of a `nnet::multinom()` model.")
  }
  
  # create tibble of results
  df <- tibble::tibble(outcome_level = unique(x$table_body$groupname_col))
  df$tbl <- 
    purrr::map(
      df$outcome_level,
      function(lvl) {
        gtsummary::modify_table_body(
          x, 
          ~ dplyr::filter(.x, .data$groupname_col %in% lvl) |> 
            dplyr::ungroup() |> 
            dplyr::select(-dplyr::any_of("groupname_col"))
        )
      }
    )
  
  tbl_merge(df$tbl, tab_spanner = paste0("**", df$outcome_level, "**"))
}
```

Il ne reste plus qu'à l'appliquer au tableau généré avec `gtsummary::tbl_regression()`. Attention : cette fonction n'est compatible qu'avec les modèles `nnet::multinom()`.

```{r}
tbl |> multinom_pivot_wider()
```
:::

Pour tester l'effet globale d'une variable dans le modèle, on aura directement recours à `car::Anova()`.

```{r}
reg2 |> car::Anova()
```

Si l'on applique `gtsummary::add_global_p()` au résultat de `gtsummary::tbl_regression()`, les p-valeurs seront recopiées pour chaque série de coefficients.

```{r}
tbl |> 
  add_global_p() |> 
  multinom_pivot_wider()
```

Une astuce consiste à cacher toutes ces colonnes de p-valeurs, n'afficher que la dernière et changer son titre de colonne.

```{r}
tbl |> 
  add_global_p() |> 
  multinom_pivot_wider() |> 
  modify_column_hide(starts_with("p.value")) |> 
  modify_column_unhide(p.value_2) |> 
  modify_spanning_header(p.value_2 ~ "**Likelihood-ratio test**")
```

Pour un graphique des coefficients, on ne peut appeler directement `ggstats::gcoef_model()` en raison de la structure différente du modèle. Heureusement, `{ggstats}` propose une fonction spécifique `ggstats::ggcoef_multinom()` avec trois types de visualisation.

```{r}
#| label: fig-ggcoef_multinom-dodged
#| fig-cap: Graphique des coefficients du modèle multinomial (type "dodged")
reg2 |> 
  ggstats::ggcoef_multinom(
    exponentiate = TRUE
  )
```

```{r}
#| label: fig-ggcoef_multinom-faceted
#| fig-cap: Graphique des coefficients du modèle multinomial (type "faceted")
reg2 |> 
  ggstats::ggcoef_multinom(
    type = "faceted",
    exponentiate = TRUE
  )
```

```{r}
#| label: fig-ggcoef_multinom-table
#| fig-cap: Graphique des coefficients du modèle multinomial (type "table")
#| fig-width: 7
#| fig-height: 7
reg2 |> 
  ggstats::ggcoef_multinom(
    type = "table",
    exponentiate = TRUE
  )
```

Pour faciliter l'interprétation, on pourra représenter les prédictions marginales du modèle (cf. @sec-estimations-marginales) avec `broom.helpers::plot_marginal_predictions()`.

```{r}
#| label: fig-plot_marginal_predictions-multinom
#| fig-cap: Prédictions marginales du modèle multinomial
#| fig-width: 7
#| fig-height: 7
#| warning: false
#| message: false
reg2 |> 
  broom.helpers::plot_marginal_predictions() |> 
  patchwork::wrap_plots(ncol = 1) &
  scale_y_continuous(labels = scales::percent, limits = c(0, .8)) &
  coord_flip()
```

::: callout-tip
Dans certaines situations, il peut être plus simple de réaliser plusieurs modèles logistiques binaires séparés plutôt qu'une régression multinomiale. Si la variable à expliquer a trois niveaux (A, B et C), on pourra réaliser un modèle binaire B vs A, et un modèle binaire C vs A. Cette approche est appelée <q>approximation de Begg et Gray</q>. On trouvera, en anglais, plus d'explications et des références bibliographiques sur [StackOverflow](https://stackoverflow.com/a/23795087/7943547).
:::

## Données pondérées

L'extension `{survey}` (cf. @sec-plan-echantillonnage) ne fournit pas de fonction adaptée aux régressions multinomiales. Cependant, il est possible d'en réaliser une en ayant recours à des poids de réplication, comme suggéré par Thomas Lumley dans son ouvrage *Complex Surveys: A Guide to Analysis Using R*. Thomas Lumley est par ailleurs l'auteur de l'extension `{survey}`.

### avec `svrepmisc::svymultinom()`

L'extension `{svrepmisc}` disponible sur [GitHub](https://github.com/carlganz/svrepmisc) fournit quelques fonctions facilitant l'utilisation des poids de réplication avec `{survey}`. Pour l'installer, on utilisera le code ci-dessous :

```{r}
#| eval: false
pak::pkg_install("carlganz/svrepmisc")
```

En premier lieu, il faut définir le design de notre tableau de données puis calculer des poids de réplication.

```{r}
#| message: false
library(survey)
library(srvyr)
dw_rep <- d |>
  as_survey(weights = poids) |> 
  as_survey_rep(type = "bootstrap", replicates = 25)
```

Il faut prévoir un nombre de `replicates` suffisant pour calculer ultérieurement les intervalles de confiance des coefficients. Plus ce nombre est élevé, plus précise sera l'estimation de la variance et donc des valeurs p et des intervalles de confiance. Cependant, plus ce nombre est élevé, plus le temps de calcul sera important. Pour gagner en temps de calcul, nous avons ici pris une valeur de 25, mais l'usage est de considérer au moins 1000 réplications.

`{svrepmisc}` fournit une fonction `svrepmisc::svymultinom()` pour le calcul d'une régression multinomiale avec des poids de réplication.

```{r}
#| results: hide
library(svrepmisc)
regm <- svymultinom(
  trav.satisf ~ sexe + etudes + trav.imp,
  design = dw_rep
)
```

`{svrepmisc}` fournit également des méthodes `svrepmisc::confint()` et `svrepmisc::tidy()`. Nous pouvons donc calculer et afficher les *odds ratio* et leur intervalle de confiance.

```{r}
regm
regm |> confint()
regm |>
  broom::tidy(exponentiate = TRUE, conf.int = TRUE)
```

Par contre, le support de `gtsummary::tbl_regression()` et `ggstats::ggcoef_model()` est plus limité. Vous pourrez afficher un tableau basique des résultats et un graphiques des coefficients, mais sans les enrichissements usuels (identification des variables, étiquettes propres, identification des niveaux, etc.).

### avec `svyVGAM::svy_glm()`

Une alternative possible pour le calcul de la régression logistique multinomiale avec des données pondérées est `svyVGAM::svy_vglm()` avec `family = VGAM::multinomial`.

Nous allons commencer par définir le plan d'échantillonnage.

```{r}
#| message: false
library(survey)
library(srvyr)
dw <- d |>
  as_survey(weights = poids)
```

Puis, on appelle `svyVGAM::svy_vglm()` en précisant `family = VGAM::multinomial`. Par défaut, `VGAM::multinomial()` utilise la dernière modalité de la variable d'intérêt comme modalité de référence. Cela est modifiable avec `refLevel`.

```{r}
#| message: false
regm2 <- svyVGAM::svy_vglm(
  trav.satisf ~ sexe + etudes + trav.imp,
  family = VGAM::multinomial(refLevel = "Equilibre"),
  design = dw
)
regm2 |> summary()
```

Là encore, le support de `gtsummary::tbl_regression()` et `ggstats::ggcoef_model()` sera limité (seulement des résultats bruts). Pour calculer les *odds ratios* avec leurs intervalles de confiance, on pourra avoir recours à `broom.helpers::tidy_parameters()`.

```{r}
regm2 |> broom.helpers::tidy_parameters(exponentiate = TRUE) 
```

## webin-R

La régression logistique multinomiale est abordée dans le webin-R #20 (*trajectoires de soins : un exemple de données longitudinales (4)*) sur [YouTube](https://www.youtube.com/watch?v=8l70djhwk2E&t=2381).

{{< video https://www.youtube.com/watch?v=8l70djhwk2E start='2381' >}}
