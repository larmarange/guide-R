# Fusion de tables {#sec-fusion_tables}

Il est fréquent d'avoir à gérer des données réparties dans plusieurs tables de données, notamment lorsque l'on a une enquêtes réalisée à différents niveaux (par exemple, un questionnaire ménage et un questionnaire individu) ou des données longitudinales.

On peut distinguer deux types d'actions :

-   l'ajout de variables (jointure entre tables)
-   l'ajout d'observations (concaténation de tables)

## Jointures avec dplyr

Le jeu de données `{nycflights13}` est un exemple de données réparties en plusieurs tables. Ici on en a trois : les informations sur les vols, celles sur les aéroports et celles sur les compagnies aériennes sont dans trois tables distinctes.

`{dplyr}` propose différentes fonctions permettant de travailler avec des données structurées de cette manière.

```{r}
#| message: false
library(tidyverse)
library(nycflights13)
data(flights)
data(airports)
data(airlines)
```

### Clés implicites

Lorsque les données sont réparties dans plusieurs tables différentes, il est essentiel de repérer les identifiants permettant de naviguer d'une table à l'autre. Dans notre exemple, on peut voir que la table `flights` contient le code de la compagnie aérienne du vol dans la variable *carrier* :

```{r}
flights |> labelled::look_for()
```

Et que par ailleurs la table `airlines` contient une information supplémentaire relative à ces compagnies, à savoir le nom complet.

```{r}
airlines |> labelled::look_for()
```

Il est donc naturel de vouloir associer les deux, en l'occurrence pour ajouter les noms complets des compagnies à la table `flights`. Dans ce cas on va faire une *jointure* : les lignes d'une table seront associées à une autre en se basant non pas sur leur position, mais sur les valeurs d'une ou plusieurs colonnes. Ces colonnes sont appelées des *clés*.

Pour faire une jointure de ce type, on va utiliser la fonction `dplyr::left_join()` :

```{r}
fusion <- flights |> left_join(airlines)
```

Pour faciliter la lecture, on va afficher seulement certaines colonnes du résultat et les premières lignes de la table :

```{r}
fusion |> 
  select(month, day, carrier, name) |> 
  head(10)
```

On voit que la table obtenue est bien la fusion des deux tables d'origine selon les valeurs des deux colonnes clés *carrier*. On est parti de la table `flights`, et pour chaque ligne on a ajouté les colonnes de `airlines` pour lesquelles la valeur de *carrier* est la même. On a donc bien une nouvelle colonne `name` dans notre table résultat, avec le nom complet de la compagnie aérienne.

::: callout-note
Nous sommes ici dans le cas le plus simple concernant les clés de jointure : les deux clés sont uniques et portent le même nom dans les deux tables. Par défaut, si on ne lui spécifie pas explicitement les clés, `{dplyr}` fusionne en utilisant l'ensemble des colonnes communes aux deux tables. On peut d'ailleurs voir dans cet exemple qu'un message a été affiché précisant que la jointure s'est faite sur la variable *carrier*.
:::

### Clés explicites

La table `airports`, elle, contient des informations supplémentaires sur les aéroports : nom complet, altitude, position géographique, etc. Chaque aéroport est identifié par un code contenu dans la colonne *faa*.

Si on regarde la table `flights`, on voit que le code d'identification des aéroports apparaît à deux endroits différents : pour l'aéroport de départ dans la colonne *origin*, et pour celui d'arrivée dans la colonne *dest*. On a donc deux clés de jointures possibles, et qui portent un nom différent de la clé de `airports`.

On va commencer par fusionner les données concernant l'aéroport de départ. Pour simplifier l'affichage des résultats, on va se contenter d'un sous-ensemble des deux tables :

```{r}
flights_ex <- flights |> select(month, day, origin, dest)
airports_ex <- airports |> select(faa, alt, name)
```

Si on se contente d'un `dplyr::left_join()` comme à l'étape précédente, on obtient un message d'erreur car aucune colonne commune ne peut être identifiée comme clé de jointure :

```{r}
#| error: true
flights_ex |> left_join(airports_ex)
```

On doit donc spécifier explicitement les clés avec l'argument `by` de `dplyr::left_join()`. Ici la clé est nommée *origin* dans la première table, et *faa* dans la seconde. La syntaxe est donc la suivante :

```{r}
flights_ex |> 
  left_join(airports_ex, by = c("origin" = "faa")) |> 
  head(10)
```

On constate que les deux nouvelles colonnes *name* et *alt* contiennent bien les données correspondant à l'aéroport de départ.

On va stocker le résultat de cette jointure dans `flights_ex` :

```{r}
flights_ex <- flights_ex |> 
  left_join(airports_ex, by = c("origin" = "faa"))
```

Supposons qu'on souhaite maintenant fusionner à nouveau les informations de la table `airports`, mais cette fois pour les aéroports d'arrivée de notre nouvelle table `flights_ex`. Les deux clés sont donc désormais *dest* dans la première table, et *faa* dans la deuxième. La syntaxe est donc la suivante :

```{r}
flights_ex |> 
  left_join(airports_ex, by=c("dest" = "faa")) |> 
  head(10)
```

Cela fonctionne, les informations de l'aéroport d'arrivée ont bien été ajoutées, mais on constate que les colonnes ont été renommées. En effet, ici les deux tables fusionnées contenaient toutes les deux des colonnes *name* et *alt*. Comme on ne peut pas avoir deux colonnes avec le même nom dans un tableau, `{dplyr}` a renommé les colonnes de la première table en *name.x* et *alt.x*, et celles de la deuxième en *name.y* et *alt.y*.

C'est pratique, mais pas forcément très parlant. On pourrait renommer manuellement les colonnes pour avoir des intitulés plus explicites avec `dplyr::rename()`, mais on peut aussi utiliser l'argument `suffix` de `dplyr::left_join()`, qui permet d'indiquer les suffixes à ajouter aux colonnes. Ainsi, on peut faire :

```{r}
flights_ex |> 
  left_join(
    airports_ex, 
    by = c("dest" = "faa"), 
    suffix = c("_depart", "_arrivee")
  ) |> 
  head(10)
```

On obtient ainsi directement des noms de colonnes nettement plus clairs.

### Types de jointures

Jusqu'à présent nous avons utilisé la fonction `dplyr::left_join()`, mais il existe plusieurs types de jointures.

Partons de deux tables d'exemple, `personnes` et `voitures` :

```{r}
personnes <- tibble(
  nom = c("Sylvie", "Sylvie", "Monique", "Gunter", "Rayan", "Rayan"),
  voiture = c("Twingo", "Ferrari", "Scenic", "Lada", "Twingo", "Clio")
)
personnes
```

```{r}
voitures <- tibble(
  voiture = c("Twingo", "Ferrari", "Clio", "Lada", "208"),
  vitesse = c("140", "280", "160", "85", "160")
)
voitures
```

#### `left_join()`

Si on fait un `dplyr::left_join()` de `voitures` sur `personnes` :

```{r}
personnes |> left_join(voitures, by = "voiture")
```

On voit que chaque ligne de `personnes` est bien présente, et qu'on lui a ajouté une ligne de `voitures` correspondante si elle existe. Dans le cas du *Scenic*, il n'y a avait pas de ligne dans `voitures`, donc *vitesse* a été peuplée avec la valeur manquante `NA`. Dans le cas de la *208*, présente dans `voitures` mais pas dans `personnes`, la ligne n'apparaît pas.

La clé de fusion étant unique dans la table de <q>droite</q>, le nombre de lignes de la table de <q>gauche</q> est donc bien préservée.

```{r}
personnes |> nrow()
personnes |> left_join(voitures, by = "voiture") |> nrow()
```

Si on fait un `dplyr::left_join()` cette fois de `personnes` sur `voitures`, c'est l'inverse :

```{r}
voitures |> left_join(personnes, by = "voiture")
```

La ligne *208* est bien là avec la variable *nom* remplie avec une valeur manquante `NA`. Par contre *Monique* est absente.

::: callout-important
On remarquera que la ligne *Twingo*, présente deux fois dans `personnes`, a été dupliquée pour être associée aux deux lignes de données de `Sylvie` et `Rayan`. Autrement dit, si la clé de fusion n'est pas unique dans la table de <q>droite</q>, certaines de lignes de la table de <q>gauche</q> seront dupliquées.

**En résumé, quand on fait un `left_join(x, y)`, toutes les lignes de `x` sont présentes, et dupliquées si nécessaire quand elles apparaissent plusieurs fois dans `y`. Les lignes de `y` non présentes dans `x` disparaissent. Les lignes de `x` non présentes dans `y` se voient attribuer des valeurs manquantes `NA` pour les nouvelles colonnes.**
:::

Intuitivement, on pourrait considérer que `left_join(x, y)` signifie <q>ramener l'information de la table `y` sur la table `x`</q>.

En général, `dplyr::left_join()` sera le type de jointures le plus fréquemment utilisé.

#### `right_join()`

La jointure `dplyr::right_join()` est l'exacte symétrique de `dplyr::left_join()`, c'est-à dire que `x |> right_join(y)` est équivalent[^fusion_tables-1] à `y |> left_join(x)` :

[^fusion_tables-1]: À l'exception de l'ordre des variables dans le tableau final.

```{r}
personnes |> right_join(voitures, by = "voiture")
voitures |> left_join(personnes, by = "voiture")
```

#### `inner_join()`

Dans le cas de `dplyr::inner_join()`, seules les lignes présentes à la fois dans `x` et `y` sont présentes (et si nécessaire dupliquées) dans la table résultat :

```{r}
personnes |> inner_join(voitures, by = "voiture")
```

Ici la ligne *208* est absente, ainsi que la ligne *Monique*, qui dans le cas d'un `dplyr::left_join()` avait été conservée et s'était vue attribuer `NA` à *vitesse*.

#### `full_join()`

Dans le cas de `dplyr::full_join()`, toutes les lignes de `x` et toutes les lignes de `y` sont conservées (avec des `NA` ajoutés si nécessaire) même si elles sont absentes de l'autre table :

```{r}
personnes |> full_join(voitures, by = "voiture")
```

#### `semi_join()` et `anti_join()`

`dplyr::semi_join()` et `dplyr::anti_join()` sont des jointures *filtrantes*, c'est-à-dire qu'elles sélectionnent les lignes de `x` sans ajouter les colonnes de `y`.

Ainsi, `dplyr::semi_join()` ne conservera que les lignes de `x` pour lesquelles une ligne de `y` existe également, et supprimera les autres. Dans notre exemple, la ligne `Monique` est donc supprimée :

```{r}
personnes |> semi_join(voitures, by = "voiture")
```

Un `dplyr::anti_join()` fait l'inverse, il ne conserve que les lignes de `x` absentes de `y`. Dans notre exemple, on ne garde donc que la ligne *Monique* :

```{r}
personnes |> anti_join(voitures, by = "voiture")
```

## Jointures avec `merge()`

La fonction `merge()` est la fonction de **R base** pour fusionner des tables entre elles.

Par défaut, elle réalise un *inner join*, c'est-à-dire qu'elle ne garde que les observations dont la clé est retrouvée dans les deux tableaux fusionnés

```{r}
merge(personnes, voitures, by = "voiture")
```

Les paramètres `all.x` et `all.y` permettent de réaliser fusions à gauche, à droite ou complète. L'équivalent de `dplyr::left_join()` sera obtenu avec `all.x = TRUE`, celui de `dplyr::right_join()` avec `all.y = TRUE` et celui de `dplyr::full_join()` avec `all.x = TRUE, all.y = TRUE`.

```{r}
merge(personnes, voitures, by = "voiture", all.x = TRUE)
personnes |> left_join(voitures)
```

## Ajouter des observations avec `bind_rows()`

::: important
La fonction `base::rbind()`, fournie nativement avec **R** pour ajouter des observations à un tableau, doit être évitée car elle générera des résultats non pertinents si les tableaux que l'on concatènent n'ont pas exactement les mêmes colonnes dans le même ordre.
:::

La fonction `dplyr::bind_rows()` de `{dplyr}` permet d'ajouter des lignes à une table à partir d'une ou plusieurs autres tables.

L'exemple suivant (certes très artificiel) montre l'utilisation de `dplyr::bind_rows()`. On commence par créer trois tableaux `t1`, `t2` et `t3` :

```{r}
t1 <- airports |> 
  select(faa, name, lat, lon) |> 
  slice(1:2)
t1
```

```{r}
t2 <- airports |> 
  select(name, faa, lon, lat) |> 
  slice(5:6)

t2
```

```{r}
t3 <- airports |> 
  select(faa, name) |> 
  slice(100:101)
t3
```

On concatène ensuite les trois tables avec `dplyr::bind_rows()` :

```{r}
bind_rows(t1, t2, t3)
```

On remarquera que si des colonnes sont manquantes pour certaines tables, comme les colonnes *lat* et *lon* de `t3`, des valeurs manquantes `NA` sont automatiquement insérées.

De plus, peu importe l'ordre des variables entre les différentes tables, `dplyr::bind_rows()` les ré-associera en considérant que deux colonnes ayant le même nom dans deux tableaux correspondent à la même variable.

Il peut être utile, quand on concatène des lignes, de garder une trace du tableau d'origine de chacune des lignes dans le tableau final. C'est possible grâce à l'argument `.id` de `dplyr::bind_rows()`. On passe à cet argument le nom d'une colonne qui contiendra l'indicateur d'origine des lignes :

```{r}
bind_rows(t1, t2, t3, .id = "source")
```

Par défaut la colonne `.id` ne contient qu'un nombre, différent pour chaque tableau. On peut lui spécifier des valeurs plus explicites en "nommant" les tables dans `dplyr::bind_rows()` de la manière suivante :

```{r}
bind_rows(table1 = t1, table2 = t2, table3 = t3, .id = "source")
```

::: note
Une alternative à `dplyr::bind_rows()` est la fonction `plyr::rbind.fill()` de l'extension `{plyr}` qui fonctionne de manière similaire.
:::
