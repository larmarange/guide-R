# Transformations multiples {#sec-transformations-multiples}

## Transformations multiples sur les colonnes

Il est souvent utile d'effectuer la même opération sur plusieurs colonnes, mais le copier-coller est à la fois fastidieux et source d'erreurs :

```{r}
#| eval: false
df |> 
  group_by(g1, g2) |> 
  summarise(
    a = mean(a),
    b = mean(b),
    c = mean(c),
    d = mean(d)
  )
```

Dans cette section, nous allons introduire `dplyr::across()` qui permets de réécrire la même commande de manière plus succincte.

```{r}
#| eval: false
df |> 
  group_by(g1, g2) |> 
  summarise(across(a:d, mean))
```

### Usage de base

`dplyr::across()` a deux arguments principaux :

-   le premier, `.cols`, permet de sélectionner les colonnes sur lesquelles on souhaite agir et accepte la même syntaxe de `dplyr::select()` ;
-   le second, `.fns`, est une fonction (ou une liste de fonctions) à appliquer à chaque colonne sélectionnée.

Voici quelques exemples avec `dplyr::summarise()`.

Dans ce premier exemple, nous utilisons `tidyselect::where()` qui permet de sélectionner les colonnes en fonction de leur type (ici les colonnes textuelles car `where()` est utilisé en conjonction avec la fonction `is.character()`). Notez que l'on passe `is.character()` sans ajouter de parenthèse. En effet, `is.character` **renvoie** la fonction du même nom, tandis que `is.character()` **appelle** la fonction pour l'exécuter. La fonction `dplyr::n_distinct()`, quant à elle, compte le nombre de valeurs uniques. Le tableau ci-dessous renvoie donc, pour chaque variable textuelle, le nombre de valeurs uniques observées dans les données.

```{r}
#| message: false
library(tidyverse)
starwars |>  
  summarise(across(where(is.character), n_distinct))
```

Dans ce second exemple, nous indiquons simplement la liste de nos variables d'intérêt.

```{r}
starwars |> 
  group_by(species) |> 
  filter(n() > 1) |>  
  summarise(across(c(sex, gender, homeworld), n_distinct))
```

Dans ce troisième exemple, nous allons calculer la moyenne pour chaque variable numérique.

```{r}
starwars |> 
  group_by(homeworld) |>  
  filter(n() > 1) |>  
  summarise(across(where(is.numeric), mean))
```

Il y a beaucoup de valeurs manquantes. Nous devons donc passer `na.rm = TRUE` à `mean()`. Différentes approches sont possibles :

-   écrire notre propre fonction `ma_fonction()` ;
-   utiliser `purrr::partial()` qui permet de renvoyer une fonction avec des valeurs par défaut différentes ;
-   la syntaxe native de **R** pour déclarer des fonctions anonymes avec le raccourci `\(arg) expr` ;
-   une formule définissant une fonction dans le style du package `purrr`, c'est-à-dire une formule commençant par `~` et dont le premier argument sera noté `.x`[^transformations-multiples-1].

[^transformations-multiples-1]: Cette syntaxe particulière n'est compatible que dans certaines fonctions du `{tidyverse}`. Ce n'est pas une syntaxe standard de **R.**

```{r}
ma_fonction <- function(x) {mean(x, na.rm = TRUE)}
starwars |> 
  group_by(homeworld) |>  
  filter(n() > 1) |>  
  summarise(across(where(is.numeric), ma_fonction))

starwars |> 
  group_by(homeworld) |>  
  filter(n() > 1) |>  
  summarise(across(where(is.numeric), purrr::partial(mean, na.rm = TRUE)))

starwars |> 
  group_by(homeworld) |>  
  filter(n() > 1) |>  
  summarise(across(where(is.numeric), \(x) {mean(x, na.rm = TRUE)}))

starwars |> 
  group_by(homeworld) |>  
  filter(n() > 1) |>  
  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))
```

Comme `dplyr::across()` est souvent utilisée au sein de `dplyr::mutate()` ou de `dplyr::summarise()`, les variables de groupement ne sont jamais sélectionnée par `dplyr::across()` pour éviter tout accident.

```{r}
df <- data.frame(
  g = c(1, 1, 2),
  x = c(-1, 1, 3),
  y = c(-1, -4, -9)
)
df |> 
  group_by(g) |> 
  summarise(across(where(is.numeric), sum))
```

### Fonctions multiples

Vous pouvez transformer chaque variable avec plus d'une fonction en fournissant une liste nommée de fonctions dans le deuxième argument :

```{r}
min_max <- list(
  min = \(x) min(x, na.rm = TRUE), 
  max = \(x) max(x, na.rm = TRUE)
)
starwars |> 
  summarise(across(where(is.numeric), min_max))
```

On peut contrôler le nom des variables produites avec l'option `.names` qui prend une chaîne de caractère au format du package [glue](https://glue.tidyverse.org/).

```{r}
starwars |> 
  summarise(
    across(
      where(is.numeric),
      min_max,
      .names = "{.fn}.{.col}"
    )
  )
```

### Accéder à la colonne courante

Si vous en avez besoin, vous pouvez accéder au nom de la colonne <q>courante</q> à l'intérieur d'une fonction en appelant `dplyr::cur_column()`. Cela peut être utile si vous voulez effectuer une sorte de transformation dépendante du contexte qui est déjà encodée dans un vecteur :

```{r}
df <- tibble(x = 1:3, y = 3:5, z = 5:7)
mult <- list(x = 1, y = 10, z = 100)

df |> 
  mutate(
    across(
      all_of(names(mult)), 
      ~ .x * mult[[cur_column()]]
    )
  )
```

Jusqu'à présent, nous nous sommes concentrés sur l'utilisation de `across()` avec `summarise()`, mais cela fonctionne avec n'importe quel autre verbe `{dplyr}` qui utilise le masquage de données.

Par exemple, nous pouvons rééchelonner toutes les variables numériques pour se situer entre 0 et 1.

```{r}
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}
df <- tibble(x = 1:4, y = rnorm(4))
df |> 
  mutate(across(where(is.numeric), rescale01))
```

### pick()

Pour certains verbes, comme `dplyr::group_by()`, `dplyr::count()` et `dplyr::distinct()`, il n'est pas nécessaire de fournir une fonction de résumé, mais il peut être utile de pouvoir sélectionner dynamiquement un ensemble de colonnes.

Dans ce cas, nous recommandons d'utiliser le complément de `dplyr::across()`, `dplyr::pick()`, qui fonctionne comme `across()` mais n'applique aucune fonction et renvoie à la place un cadre de données contenant les colonnes sélectionnées.

```{r}
starwars |> 
  distinct(pick(contains("color")))
starwars |> 
  count(pick(contains("color")), sort = TRUE)
```

`dplyr::across()` ne fonctionne pas avec `dplyr::select()` ou `dplyr::rename()` parce qu'ils utilisent déjà une syntaxe de sélection dynamique. Si vous voulez transformer les noms de colonnes avec une fonction, vous pouvez utiliser `dplyr::rename_with()`.

## Sélection de lignes à partir d'une sélection de colonnes

Nous ne pouvons pas utiliser directement `across()` dans `dplyr::filter()` car nous avons besoin d'une étape supplémentaire pour combiner les résultats. À cette fin, `filter()` dispose de deux fonctions complémentaires spéciales :

`dplyr::if_any()` conserve les lignes pour lesquelles le prédicat est vrai pour *au moins une* colonne sélectionnée :

```{r}
starwars |> 
  filter(if_any(everything(), ~ !is.na(.x)))
```

`dplyr::if_all()` sélectionne les lignes pour lesquelles le prédicat est vrai pour *toutes* les colonnes sélectionnées :

```{r}
starwars |>  
  filter(if_all(everything(), ~ !is.na(.x)))
```

## Transformations multiples sur les lignes

`{dplyr}`, et **R** de manière générale, sont particulièrement bien adaptés à l'exécution d'opérations sur les colonnes, alors que l'exécution d'opérations sur les lignes est beaucoup plus difficile. Ici, nous verrons comment réaliser des calculs ligne par ligne avec `dplyr::rowwise()`.

### Création

Les opérations par ligne requièrent un type spécial de regroupement où chaque groupe est constitué d'une seule ligne. Vous créez ce type de groupe avec `dplyr::rowwise()` :

```{r}
df <- tibble(x = 1:2, y = 3:4, z = 5:6)
df |> rowwise()
```

Comme `group_by()`, `rowwise()` ne fait rien en soi ; elle modifie simplement le fonctionnement des autres verbes. Par exemple, comparez les résultats de `mutate()` dans le code suivant :

```{r}
df |> 
  mutate(m = mean(c(x, y, z)))
df |> 
  rowwise() |> 
  mutate(m = mean(c(x, y, z)))
```

Si vous utilisez `mutate()` avec un tableau de données classique, il calcule la moyenne de `x`, `y` et `z` sur toutes les lignes. Si vous l'appliquez à un tableau de données *row-wise*, il calcule la moyenne séparément pour chaque ligne.

Vous pouvez optionnellement fournir des variables <q>identifiantes</q> dans votre appel à `rowwise()`. Ces variables sont conservées lorsque vous appelez `summarise()`, de sorte qu'elles se comportent de manière similaire aux variables de regroupement passées à `group_by()`:

```{r}
df <- tibble(
  name = c("Mara", "Hadley"),
  x = 1:2,
  y = 3:4,
  z = 5:6
)

df |> 
  rowwise() |> 
  summarise(m = mean(c(x, y, z)))

df |> 
  rowwise(name) |> 
  summarise(m = mean(c(x, y, z)))
```

`rowwise()` n'est qu'une forme spéciale de regroupement : donc si vous voulez enlever sa déclaration, appelez simplement `ungroup()`.

### Statistiques ligne par ligne

`dplyr::summarise()` permet de résumer facilement les valeurs d'une ligne à l'autre à l'intérieur d'une colonne. Combinée à `rowwise()`, elle permet également de résumer les valeurs de plusieurs colonnes à l'intérieur d'une même ligne. Pour voir comment, commençons par créer un petit jeu de données :

```{r}
df <- tibble(
  id = 1:6,
  w = 10:15,
  x = 20:25,
  y = 30:35,
  z = 40:45
)
df
```

Supposons que nous voulions calculer la somme de `w`, `x`, `y` et `z` pour chaque ligne. Nous pouvons utiliser `mutate()` pour ajouter une nouvelle colonne ou `summarise()` pour renvoyer ce seul résumé :

```{r}
df |> 
  rowwise(id) |> 
  mutate(total = sum(c(w, x, y, z)))
df |> 
  rowwise(id) |> 
  summarise(total = sum(c(w, x, y, z)))
```

Bien sûr, si vous avez beaucoup de variables, il sera fastidieux de taper chaque nom de variable. Au lieu de cela, vous pouvez utiliser `dplyr::c_across()` qui utilise une syntaxe *tidy selection* afin de sélectionner succinctement de nombreuses variables :

```{r}
df |> 
  rowwise(id) |> 
  mutate(total = sum(c_across(w:z)))
df |> 
  rowwise(id) |> 
  mutate(total = sum(c_across(where(is.numeric))))
```

Vous pouvez combiner cela avec des opérations par colonne (voir la section précédente) pour calculer la proportion du total pour chaque colonne :

```{r}
df |> 
  rowwise(id) |> 
  mutate(total = sum(c_across(w:z))) |> 
  ungroup() |> 
  mutate(across(w:z, ~ . / total))
```

::: callout-important
L'approche `rowwise()` fonctionne pour n'importe quelle fonction de résumé. Mais si vous avez besoin d'une plus grande rapidité, il est préférable de rechercher une variante intégrée de votre fonction de résumé. Celles-ci sont plus efficaces car elles opèrent sur l'ensemble du cadre de données ; elles ne le divisent pas en lignes, ne calculent pas le résumé et ne joignent pas à nouveau les résultats.

Par exemple, **R** fournit nativement les fonctions `rowSums()` et `rowMeans()` pour calculer des sommes et des moyennes par ligne. Elles sont de fait bien plus efficaces.

```{r}
df  |> 
  mutate(total = rowSums(pick(where(is.numeric), -id)))
df |> 
  mutate(mean = rowMeans(pick(where(is.numeric), -id)))
```
:::
